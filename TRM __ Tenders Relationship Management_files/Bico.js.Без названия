if(!window.console){
	window.console = {
		log: function(){},
		error: function(){}
	};

	if($.browser.opera && window.opera && window.opera.postError){
		window.console.log = window.console.error = function(msg){
			window.opera.postError(msg);
		}
	}
};

Bc = Bico = { //Test updateInstead
	_loadedScripts: {},

	page: {},

	widget: {},

	options: {},

	_isPageLoaded: false,

	_isBrowserTabActive: true,

	errorsLogged: 0,

	logError: function (e) {
		if (this.errorsLogged > 10) return;
		this.errorsLogged++;

		Bc.Ajax({
			url : '/index/ajax-log-js-error',
			data: {
				location: location.toString(),
				error: e.toString(),
				message: e.message,
				stack: e.stack,
				filename: e.filename,
				lineno: e.lineno,
				colno: e.colno,
				userAgent: navigator.userAgent
			}
		});
	},

	/**
	 *  находит число в строке после определенного текста шаблону
	 */
	intInString : function(string,separator,template) {
		arr = string.split(separator);	
		for(i in arr){
			if(arr[i].search(template) > -1){
				return ((arr[i]).replace(/(\D)+/,''));
			}
		}
		return false;
	},

	onLoad: function(){
		$(window).focus($.proxy(function() {
			this._isBrowserTabActive = true;
		}, this));

		$(window).blur($.proxy(function() {
			this._isBrowserTabActive = false;
		}, this));

		this._saveGoogleAnalyticsClientId();

		this._addCopyLogger();

		this._addPasswordToggle();

		if(this.page.onLoad){
			this.page.onLoad();
		}
	},

	_addPasswordToggle: function () {
		$(document).on('click', "span.toggle-password", function() {
			$(this).toggleClass("icon-eye icon-eye-slash");

			let $input = $(this).prev();

			if ($input.attr("type") == "password") {
				$input.attr("type", "text");
			} else {
				$input.attr("type", "password");
			}
		});
	},

	_addCopyLogger: function () {
		$(document).on('copy', function (e) {
			let event = e.originalEvent || {};
			let path = [];

			for (const i in event.path) {
				let pathTag = event.path[i];
				let pathItem = pathTag.tagName.toLowerCase();
				if (pathItem == 'body') break;

				pathItem += pathTag.id ? ('#' + pathTag.id) : '';
				pathItem += pathTag.className ? ('.' + pathTag.className.replace(/\s+/, '.')) : '';

				path.push(pathItem);
			}

			Bc.Ajax({
				url: '/index/ajax-register-copy-on-site/',
				indicate: false,
				data: {
					page: location.pathname + location.search + location.hash,
					path: path.join(','),
					html: $(e.target).outerHTML()
				}
			});
		});
	},

	_saveGoogleAnalyticsClientId: function() {
		if (!window.Bc_employee_id) return;

		let self = this;
		this._setGaKeyTimer = setInterval(function() {
			if (!window.ga) return;

			clearInterval(self._setGaKeyTimer);

			window.ga(function() {
				let gaClientId = window.ga.getAll()[0].get('clientId');

				let sentGaClientIds = {};
				if (localStorage.sentGaClientIds) {
					sentGaClientIds = Bc.Array.codeToObj(localStorage.sentGaClientIds) || {};
				}

				if (!sentGaClientIds[gaClientId] && gaClientId) {
					Bc.Ajax({
						url: '/login/ajax-register-ga-client-id',
						data: {
							gaClientId: gaClientId
						},
						indicate: false,
						success: function() {
							sentGaClientIds[gaClientId] = true;
							localStorage.sentGaClientIds = Bc.Array.objToCode(sentGaClientIds);
						}
					});
				}
			});
		}, 300);
	},

	/**
	 * Возвращает уникальную строку.
	 *
	 * @return {String} Уникальная строка.
	 */
	getUID: function(){
		this._uniqueIdCounter = this._uniqueIdCounter || 0;
		return 'bc_unique_id_' + Number(new Date()) + (this._uniqueIdCounter++);
	},

	include: function(src){
		this._included = this._included || {};

		if(this._included[src]){
			console.error('Duplicate including on "'+src+'" file.');
		}
		this._included[src] = true;

		document.write('<script type="text/javascript" src="' + this._getScriptFullSrc(src) + '"></script>');
	},

	loadScript: function(src, onLoadHandler) {
		var scriptData = this._loadedScripts[src] = this._loadedScripts[src] || {
			state: 'notLoaded',
			handlers: []
		};

		if (scriptData.state == 'notLoaded') {
			scriptData.handlers.push(onLoadHandler);
			scriptData.state = 'loading';
			this._loadScriptSys(src, function() {
				scriptData.state = 'loaded';
				for (var i = 0; i < scriptData.handlers.length; i++) {
					(scriptData.handlers[i])();
				}
			});
		} else if (scriptData.state == 'loading') {
			scriptData.handlers.push(onLoadHandler);
		} else if (scriptData.state == 'loaded') {
			onLoadHandler();
		}
	},

	loadList: function(list, onLoadHandler) {
		var filesToLoad = 0;
		var allFilesProcessed = false;
		for (var i = 0; i < list.length; i++) {
			filesToLoad++;
			this.loadScript(list[i], function() {
				filesToLoad--;
				if (filesToLoad === 0 && allFilesProcessed) {
					onLoadHandler();
				}
			});
		}

		allFilesProcessed = true;
		if (filesToLoad === 0 && allFilesProcessed) {
			onLoadHandler();
		}
	},

	moveToPageWithPostData: function(pageAddress, postData){
		let s = [];
		let formId = 'moveToPageWithPostDataForm';

		postData = Bc.Array.toFlatArray(postData);

		s.push('<form action="'+pageAddress+'" method="post" id="'+formId+'">');
		for (let varName in postData) {
			if(!postData.hasOwnProperty(varName)) continue;

			var varValue = postData[varName];

			if (typeof varValue  != 'object') {
				s.push('<input name="'+varName+'" value="'+varValue+'" type="hidden"/>');
			} else {
				for(var i in varValue) {
					s.push('<input name="'+varName+'['+i+']" value="'+varValue[i]+'" type="hidden"/>');
				}
			}
		}
		s.push('</form>');

		$('body').append(s.join(''));
		$('#'+formId).get(0).submit();
	},

	timeCheck: function(streamName, mode){
		this._timeCheck = this._timeCheck || {};
		this._timeCheckFull = this._timeCheckFull || {};

		this._timeCheckFull[streamName] = this._timeCheckFull[streamName] || 0;

		if (mode == 'begin') {
			this._timeCheck[streamName] = (new Date()).getTime();
		} else {
			var timer = (new Date()).getTime();
			var time = timer - this._timeCheck[streamName];
			this._timeCheckFull[streamName] += time;
		}
	},

	decline: function(count, one, some, many){
		count = count.toString();
		var c1 = count.substring(count.length - 1);
		var c2 = count.substring(count.length - 2);
		return (c1 == 1 && c2 != 11) ?
				one
			:	(c1 > 1 && c1 < 5) && (c2 < 10 || c2 > 20) ?
					some
				:	many;
	},

	getModuleName: function () {
		return location.pathname.replace(/^\//, '').split('/')[0];
	},

	isPageLoaded: function () {
		return this._isPageLoaded;
	},

	scrollTo: function (selector, speed) {
		if (speed === 0) {
			$(window).scrollTop($(selector).offset().top);
		} else {
			$('html, body').animate({
				scrollTop: $(selector).offset().top
			}, speed || 500);
		}
	},

	yaReachGoal: function(o, handler) {
		try {
			o = (typeof o == 'string') ? {name: o} : o;
			let name = o.name.replace(/[^\w-]/u, '_');
			let options = o.options || {};
			handler = handler || function () {};

			if (window.Bc_isDevMode) {
				handler.call();
				return;
			}

			if (window.ym) {
				window.ym(window.yandexMetricId, 'reachGoal', name, options, handler);
			} else {
				handler.call();
			}
		} catch (e) { Bc.logError(e); }
	},

	yaVisitParams: function(o, handler) {
		try {
			handler = handler || function () {};
			if (window.Bc_isDevMode) {
				handler.call();
				return;
			}

			if (window.ym) {
				window.ym(window.yandexMetricId, 'params', o);
			} else {
				console.log('yaVisitParams, no yandex counter object:', o);
			}

			handler.call();
		} catch (e) { Bc.logError(e); }
	},

	yaUserParams: function(o, handler) {
		try {
			handler = handler || function () {};
			if (window.Bc_isDevMode) {
				handler.call();
				return;
			}

			if (window.ym) {
				window.ym(window.yandexMetricId, 'userParams', o);
			} else {
				console.log('yaUserParams, no yandex counter object:', o);
			}

			handler.call();
		} catch (e) { Bc.logError(e); }
	},

	yaGetClientId: function(handler, waitForCounter = true) {
		let self = this;

		try {
			if (window.Bc_isDevMode) {
				handler.call({}, 1);
			} else if (this.yandexClientId) {
				handler.call({}, this.yandexClientId);
			} else if (window.ym) {
				window.ym(window.yandexMetricId, 'getClientID', function(yandexClientId) {
					self.yandexClientId = yandexClientId;
					handler.call({}, yandexClientId);
				});

				setTimeout(function () {
					if (!self.yandexClientId) {
						handler.call({}, 'unknown');
					}
				}, 5000);
			} else {
				if (waitForCounter) {
					setTimeout(function () {
						self.yaGetClientId(handler, false);
					}, 2000);
				} else {
					handler.call({}, 'noCounter');
				}
			}
		} catch (e) { Bc.logError(e); }
	},

	trackMailRuEvent: function (o, handler) {
		handler = handler || function () {};
		if (window.Bc_isDevMode) {
			handler.call();
			return;
		}

		window._tmr.push({ id: '3124546', type: 'reachGoal', goal: 'bicomytarget'});

		handler.call();
	},

	numberFormat: function (number) {
		return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "&nbsp;");
	},

	isBrowserTabActive: function() {
		if (document.hasFocus) {
			return document.hasFocus();
		} else {
			return this._isBrowserTabActive;
		}
	},

	_getScriptFullSrc: function(src) {
		if (src && src.match(/^http.*$/)) return src;

		var extension = src.split('.').pop();

		if (src.charAt(0) == '/') {
			var fullSrc = src;
		} else if (extension == 'css') {
			var fullSrc = '/css/' + src;
		} else {
			var fullSrc = '/js/' + src;
		}

		if (
			window.Bc_deployData &&
			window.Bc_deployData.staticFileMd5 &&
			window.Bc_deployData.staticFileMd5[fullSrc] &&
			!location.href.match('debug-js')
		) {
			let fileKey = window.Bc_deployData.staticFileMd5[fullSrc];

			fullSrc = fullSrc.replace(/^\/css\//, '/generated-css/');
			fullSrc = fullSrc.replace(/^\/js\//, '/generated-js/');
			fullSrc = fullSrc + '?' + fileKey;
		} else {
			if (!window.Bc_deployData) {
				fullSrc = fullSrc + '?' + (new Date()).getTime();
			}
		}

		return  (window.domain !== undefined && typeof window.domain != 'object' ? window.domain : '') + fullSrc;
	},

	_loadScriptSys: function(src, onLoadHandler) {
		var fullSrc = this._getScriptFullSrc(src);
		var extension = src && src.split('.').pop();

		if (extension == 'css') {
			var cssLink = $("<link>");
			$("head").append(cssLink); //IE hack: append before setting href
			cssLink.attr({ rel: "stylesheet", type: "text/css", href: fullSrc });
			onLoadHandler();
		} else {
			var isLoaded = false;
			var head = document.getElementsByTagName("head")[0] || document.documentElement;
			var scriptTag = document.createElement("script");

			scriptTag.src = fullSrc;
			scriptTag.onload = scriptTag.onreadystatechange = function(){
				if (!isLoaded && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) {
					isLoaded = true;
					onLoadHandler();

					scriptTag.onload = scriptTag.onreadystatechange = null;
					if (head && scriptTag.parentNode) {
						head.removeChild(scriptTag);
					}
				}
			};

			head.appendChild(scriptTag);
		}
	}
}

jQuery.fn.jsAttr = function(attrName){
	var elemClass = this.attr('class');
	if(!elemClass) return '';

	var matchData =
	elemClass.match(new RegExp('js-'+attrName+'-\'([^\']*)\'')) ||
	elemClass.match(new RegExp('js-'+attrName+'-([^\\s]*)'));

	return matchData ? matchData[1] : '';
};

jQuery.fn.center = function() {
	var $w = $(window);

	this.css({
		position: 'absolute',
		top: ($w.height() - this.height()) / 2 + $w.scrollTop() + 'px',
		left: ($w.width() - this.width()) / 2 + $w.scrollLeft() + 'px'
	});
	return this;
};

jQuery.fn.outerHTML = function() {
	return $(this).clone().wrap('<div></div>').parent().html();
};

jQuery.fn.toggleTo = function(state) {
	if (state) {
		$(this).show();
	} else {
		$(this).hide();
	}
}

jQuery.fn.toggleClassTo = function(className, state) {
	if (state) {
		$(this).addClass(className);
	} else {
		$(this).removeClass(className);
	}
}

jQuery.fn.getValue = function() {
	if ($(this).hasClass('js-widget-FormElementTreeSelect')) {
		let tree = $(this).data('bcWidget');

		return tree.multiSelect ? tree.getValue() : (tree.getValue()[0]);
	} else {
		return $(this).val();
	}
}

jQuery.fn.setValue = function(value) {
	if ($(this).hasClass('js-widget-FormElementTreeSelect')) {
		$(this).data('bcWidget').setValue(value);
	} else {
		return $(this).val(value);
	}
}

/*!
 * jQuery Form Plugin
 * version: 4.2.1
 * Requires jQuery v1.7 or later
 * Copyright 2017 Kevin Morris
 * Copyright 2006 M. Alsup
 * Project repository: https://github.com/jquery-form/form
 * Dual licensed under the MIT and LGPLv3 licenses.
 * https://github.com/jquery-form/form#license
 */
!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):"object"==typeof module&&module.exports?module.exports=function(b,c){return void 0===c&&(c="undefined"!=typeof window?require("jquery"):require("jquery")(b)),a(c),c}:a(jQuery)}(function(a){"use strict";function b(b){var c=b.data;b.isDefaultPrevented()||(b.preventDefault(),a(b.target).closest("form").ajaxSubmit(c))}function c(b){var c=b.target,d=a(c);if(!d.is("[type=submit],[type=image]")){var e=d.closest("[type=submit]");if(0===e.length)return;c=e[0]}var f=c.form;if(f.clk=c,"image"===c.type)if(void 0!==b.offsetX)f.clk_x=b.offsetX,f.clk_y=b.offsetY;else if("function"==typeof a.fn.offset){var g=d.offset();f.clk_x=b.pageX-g.left,f.clk_y=b.pageY-g.top}else f.clk_x=b.pageX-c.offsetLeft,f.clk_y=b.pageY-c.offsetTop;setTimeout(function(){f.clk=f.clk_x=f.clk_y=null},100)}function d(){if(a.fn.ajaxSubmit.debug){var b="[jquery.form] "+Array.prototype.join.call(arguments,"");window.console&&window.console.log?window.console.log(b):window.opera&&window.opera.postError&&window.opera.postError(b)}}var e={};e.fileapi=void 0!==a('<input type="file">').get(0).files,e.formdata=void 0!==window.FormData;var f=!!a.fn.prop;a.fn.attr2=function(){if(!f)return this.attr.apply(this,arguments);var a=this.prop.apply(this,arguments);return a&&a.jquery||"string"==typeof a?a:this.attr.apply(this,arguments)},a.fn.ajaxSubmit=function(b,c,g,h){function i(c){var d,e,f=a.param(c,b.traditional).split("&"),g=f.length,h=[];for(d=0;d<g;d++)f[d]=f[d].replace(/\+/g," "),e=f[d].split("="),h.push([decodeURIComponent(e[0]),decodeURIComponent(e[1])]);return h}function j(c){for(var d=new FormData,e=0;e<c.length;e++)d.append(c[e].name,c[e].value);if(b.extraData){var f=i(b.extraData);for(e=0;e<f.length;e++)f[e]&&d.append(f[e][0],f[e][1])}b.data=null;var g=a.extend(!0,{},a.ajaxSettings,b,{contentType:!1,processData:!1,cache:!1,type:l||"POST"});b.uploadProgress&&(g.xhr=function(){var c=a.ajaxSettings.xhr();return c.upload&&c.upload.addEventListener("progress",function(a){var c=0,d=a.loaded||a.position,e=a.total;a.lengthComputable&&(c=Math.ceil(d/e*100)),b.uploadProgress(a,d,e,c)},!1),c}),g.data=null;var h=g.beforeSend;return g.beforeSend=function(a,c){b.formData?c.data=b.formData:c.data=d,h&&h.call(this,a,c)},a.ajax(g)}function k(c){function e(a){var b=null;try{a.contentWindow&&(b=a.contentWindow.document)}catch(a){d("cannot get iframe.contentWindow document: "+a)}if(b)return b;try{b=a.contentDocument?a.contentDocument:a.document}catch(c){d("cannot get iframe.contentDocument: "+c),b=a.document}return b}function g(){function b(){try{var a=e(q).readyState;d("state = "+a),a&&"uninitialized"===a.toLowerCase()&&setTimeout(b,50)}catch(a){d("Server abort: ",a," (",a.name,")"),h(2),w&&clearTimeout(w),w=void 0}}var c=o.attr2("target"),f=o.attr2("action"),g=o.attr("enctype")||o.attr("encoding")||"multipart/form-data";x.setAttribute("target",n),l&&!/post/i.test(l)||x.setAttribute("method","POST"),f!==k.url&&x.setAttribute("action",k.url),k.skipEncodingOverride||l&&!/post/i.test(l)||o.attr({encoding:"multipart/form-data",enctype:"multipart/form-data"}),k.timeout&&(w=setTimeout(function(){v=!0,h(1)},k.timeout));var i=[];try{if(k.extraData)for(var j in k.extraData)k.extraData.hasOwnProperty(j)&&(a.isPlainObject(k.extraData[j])&&k.extraData[j].hasOwnProperty("name")&&k.extraData[j].hasOwnProperty("value")?i.push(a('<input type="hidden" name="'+k.extraData[j].name+'">',z).val(k.extraData[j].value).appendTo(x)[0]):i.push(a('<input type="hidden" name="'+j+'">',z).val(k.extraData[j]).appendTo(x)[0]));k.iframeTarget||p.appendTo(A),q.attachEvent?q.attachEvent("onload",h):q.addEventListener("load",h,!1),setTimeout(b,15);try{x.submit()}catch(a){var m=document.createElement("form").submit;m.apply(x)}}finally{x.setAttribute("action",f),x.setAttribute("enctype",g),c?x.setAttribute("target",c):o.removeAttr("target"),a(i).remove()}}function h(b){if(!r.aborted&&!F){if(E=e(q),E||(d("cannot access response document"),b=2),1===b&&r)return r.abort("timeout"),void y.reject(r,"timeout");if(2===b&&r)return r.abort("server abort"),void y.reject(r,"error","server abort");if(E&&E.location.href!==k.iframeSrc||v){q.detachEvent?q.detachEvent("onload",h):q.removeEventListener("load",h,!1);var c,f="success";try{if(v)throw"timeout";var g="xml"===k.dataType||E.XMLDocument||a.isXMLDoc(E);if(d("isXml="+g),!g&&window.opera&&(null===E.body||!E.body.innerHTML)&&--G)return d("requeing onLoad callback, DOM not available"),void setTimeout(h,250);var i=E.body?E.body:E.documentElement;r.responseText=i?i.innerHTML:null,r.responseXML=E.XMLDocument?E.XMLDocument:E,g&&(k.dataType="xml"),r.getResponseHeader=function(a){return{"content-type":k.dataType}[a.toLowerCase()]},i&&(r.status=Number(i.getAttribute("status"))||r.status,r.statusText=i.getAttribute("statusText")||r.statusText);var j=(k.dataType||"").toLowerCase(),l=/(json|script|text)/.test(j);if(l||k.textarea){var n=E.getElementsByTagName("textarea")[0];if(n)r.responseText=n.value,r.status=Number(n.getAttribute("status"))||r.status,r.statusText=n.getAttribute("statusText")||r.statusText;else if(l){var o=E.getElementsByTagName("pre")[0],s=E.getElementsByTagName("body")[0];o?r.responseText=o.textContent?o.textContent:o.innerText:s&&(r.responseText=s.textContent?s.textContent:s.innerText)}}else"xml"===j&&!r.responseXML&&r.responseText&&(r.responseXML=H(r.responseText));try{D=J(r,j,k)}catch(a){f="parsererror",r.error=c=a||f}}catch(a){d("error caught: ",a),f="error",r.error=c=a||f}r.aborted&&(d("upload aborted"),f=null),r.status&&(f=r.status>=200&&r.status<300||304===r.status?"success":"error"),"success"===f?(k.success&&k.success.call(k.context,D,"success",r),y.resolve(r.responseText,"success",r),m&&a.event.trigger("ajaxSuccess",[r,k])):f&&(void 0===c&&(c=r.statusText),k.error&&k.error.call(k.context,r,f,c),y.reject(r,"error",c),m&&a.event.trigger("ajaxError",[r,k,c])),m&&a.event.trigger("ajaxComplete",[r,k]),m&&!--a.active&&a.event.trigger("ajaxStop"),k.complete&&k.complete.call(k.context,r,f),F=!0,k.timeout&&clearTimeout(w),setTimeout(function(){k.iframeTarget?p.attr("src",k.iframeSrc):p.remove(),r.responseXML=null},100)}}}var i,j,k,m,n,p,q,r,t,u,v,w,x=o[0],y=a.Deferred();if(y.abort=function(a){r.abort(a)},c)for(j=0;j<s.length;j++)i=a(s[j]),f?i.prop("disabled",!1):i.removeAttr("disabled");k=a.extend(!0,{},a.ajaxSettings,b),k.context=k.context||k,n="jqFormIO"+(new Date).getTime();var z=x.ownerDocument,A=o.closest("body");if(k.iframeTarget?(p=a(k.iframeTarget,z),u=p.attr2("name"),u?n=u:p.attr2("name",n)):(p=a('<iframe name="'+n+'" src="'+k.iframeSrc+'" />',z),p.css({position:"absolute",top:"-1000px",left:"-1000px"})),q=p[0],r={aborted:0,responseText:null,responseXML:null,status:0,statusText:"n/a",getAllResponseHeaders:function(){},getResponseHeader:function(){},setRequestHeader:function(){},abort:function(b){var c="timeout"===b?"timeout":"aborted";d("aborting upload... "+c),this.aborted=1;try{q.contentWindow.document.execCommand&&q.contentWindow.document.execCommand("Stop")}catch(a){}p.attr("src",k.iframeSrc),r.error=c,k.error&&k.error.call(k.context,r,c,b),m&&a.event.trigger("ajaxError",[r,k,c]),k.complete&&k.complete.call(k.context,r,c)}},m=k.global,m&&0==a.active++&&a.event.trigger("ajaxStart"),m&&a.event.trigger("ajaxSend",[r,k]),k.beforeSend&&k.beforeSend.call(k.context,r,k)===!1)return k.global&&a.active--,y.reject(),y;if(r.aborted)return y.reject(),y;(t=x.clk)&&(u=t.name)&&!t.disabled&&(k.extraData=k.extraData||{},k.extraData[u]=t.value,"image"===t.type&&(k.extraData[u+".x"]=x.clk_x,k.extraData[u+".y"]=x.clk_y));var B=a("meta[name=csrf-token]").attr("content"),C=a("meta[name=csrf-param]").attr("content");C&&B&&(k.extraData=k.extraData||{},k.extraData[C]=B),k.forceSync?g():setTimeout(g,10);var D,E,F,G=50,H=a.parseXML||function(a,b){return window.ActiveXObject?(b=new ActiveXObject("Microsoft.XMLDOM"),b.async="false",b.loadXML(a)):b=(new DOMParser).parseFromString(a,"text/xml"),b&&b.documentElement&&"parsererror"!==b.documentElement.nodeName?b:null},I=a.parseJSON||function(a){return window.eval("("+a+")")},J=function(b,c,d){var e=b.getResponseHeader("content-type")||"",f=("xml"===c||!c)&&e.indexOf("xml")>=0,g=f?b.responseXML:b.responseText;return f&&"parsererror"===g.documentElement.nodeName&&a.error&&a.error("parsererror"),d&&d.dataFilter&&(g=d.dataFilter(g,c)),"string"==typeof g&&(("json"===c||!c)&&e.indexOf("json")>=0?g=I(g):("script"===c||!c)&&e.indexOf("javascript")>=0&&a.globalEval(g)),g};return y}if(!this.length)return d("ajaxSubmit: skipping submit process - no element selected"),this;var l,m,n,o=this;"function"==typeof b?b={success:b}:"string"==typeof b||b===!1&&arguments.length>0?(b={url:b,data:c,dataType:g},"function"==typeof h&&(b.success=h)):void 0===b&&(b={}),l=b.method||b.type||this.attr2("method"),m=b.url||this.attr2("action"),n="string"==typeof m?a.trim(m):"",n=n||window.location.href||"",n&&(n=(n.match(/^([^#]+)/)||[])[1]),b=a.extend(!0,{url:n,success:a.ajaxSettings.success,type:l||a.ajaxSettings.type,iframeSrc:/^https/i.test(window.location.href||"")?"javascript:false":"about:blank"},b);var p={};if(this.trigger("form-pre-serialize",[this,b,p]),p.veto)return d("ajaxSubmit: submit vetoed via form-pre-serialize trigger"),this;if(b.beforeSerialize&&b.beforeSerialize(this,b)===!1)return d("ajaxSubmit: submit aborted via beforeSerialize callback"),this;var q=b.traditional;void 0===q&&(q=a.ajaxSettings.traditional);var r,s=[],t=this.formToArray(b.semantic,s,b.filtering);if(b.data){var u=a.isFunction(b.data)?b.data(t):b.data;b.extraData=u,r=a.param(u,q)}if(b.beforeSubmit&&b.beforeSubmit(t,this,b)===!1)return d("ajaxSubmit: submit aborted via beforeSubmit callback"),this;if(this.trigger("form-submit-validate",[t,this,b,p]),p.veto)return d("ajaxSubmit: submit vetoed via form-submit-validate trigger"),this;var v=a.param(t,q);r&&(v=v?v+"&"+r:r),"GET"===b.type.toUpperCase()?(b.url+=(b.url.indexOf("?")>=0?"&":"?")+v,b.data=null):b.data=v;var w=[];if(b.resetForm&&w.push(function(){o.resetForm()}),b.clearForm&&w.push(function(){o.clearForm(b.includeHidden)}),!b.dataType&&b.target){var x=b.success||function(){};w.push(function(c,d,e){var f=arguments,g=b.replaceTarget?"replaceWith":"html";a(b.target)[g](c).each(function(){x.apply(this,f)})})}else b.success&&(a.isArray(b.success)?a.merge(w,b.success):w.push(b.success));if(b.success=function(a,c,d){for(var e=b.context||this,f=0,g=w.length;f<g;f++)w[f].apply(e,[a,c,d||o,o])},b.error){var y=b.error;b.error=function(a,c,d){var e=b.context||this;y.apply(e,[a,c,d,o])}}if(b.complete){var z=b.complete;b.complete=function(a,c){var d=b.context||this;z.apply(d,[a,c,o])}}var A=a("input[type=file]:enabled",this).filter(function(){return""!==a(this).val()}),B=A.length>0,C="multipart/form-data",D=o.attr("enctype")===C||o.attr("encoding")===C,E=e.fileapi&&e.formdata;d("fileAPI :"+E);var F,G=(B||D)&&!E;b.iframe!==!1&&(b.iframe||G)?b.closeKeepAlive?a.get(b.closeKeepAlive,function(){F=k(t)}):F=k(t):F=(B||D)&&E?j(t):a.ajax(b),o.removeData("jqxhr").data("jqxhr",F);for(var H=0;H<s.length;H++)s[H]=null;return this.trigger("form-submit-notify",[this,b]),this},a.fn.ajaxForm=function(e,f,g,h){if(("string"==typeof e||e===!1&&arguments.length>0)&&(e={url:e,data:f,dataType:g},"function"==typeof h&&(e.success=h)),e=e||{},e.delegation=e.delegation&&a.isFunction(a.fn.on),!e.delegation&&0===this.length){var i={s:this.selector,c:this.context};return!a.isReady&&i.s?(d("DOM not ready, queuing ajaxForm"),a(function(){a(i.s,i.c).ajaxForm(e)}),this):(d("terminating; zero elements found by selector"+(a.isReady?"":" (DOM not ready)")),this)}return e.delegation?(a(document).off("submit.form-plugin",this.selector,b).off("click.form-plugin",this.selector,c).on("submit.form-plugin",this.selector,e,b).on("click.form-plugin",this.selector,e,c),this):this.ajaxFormUnbind().on("submit.form-plugin",e,b).on("click.form-plugin",e,c)},a.fn.ajaxFormUnbind=function(){return this.off("submit.form-plugin click.form-plugin")},a.fn.formToArray=function(b,c,d){var f=[];if(0===this.length)return f;var g,h=this[0],i=this.attr("id"),j=b||void 0===h.elements?h.getElementsByTagName("*"):h.elements;if(j&&(j=a.makeArray(j)),i&&(b||/(Edge|Trident)\//.test(navigator.userAgent))&&(g=a(':input[form="'+i+'"]').get(),g.length&&(j=(j||[]).concat(g))),!j||!j.length)return f;a.isFunction(d)&&(j=a.map(j,d));var k,l,m,n,o,p,q;for(k=0,p=j.length;k<p;k++)if(o=j[k],(m=o.name)&&!o.disabled)if(b&&h.clk&&"image"===o.type)h.clk===o&&(f.push({name:m,value:a(o).val(),type:o.type}),f.push({name:m+".x",value:h.clk_x},{name:m+".y",value:h.clk_y}));else if((n=a.fieldValue(o,!0))&&n.constructor===Array)for(c&&c.push(o),l=0,q=n.length;l<q;l++)f.push({name:m,value:n[l]});else if(e.fileapi&&"file"===o.type){c&&c.push(o);var r=o.files;if(r.length)for(l=0;l<r.length;l++)f.push({name:m,value:r[l],type:o.type});else f.push({name:m,value:"",type:o.type})}else null!==n&&void 0!==n&&(c&&c.push(o),f.push({name:m,value:n,type:o.type,required:o.required}));if(!b&&h.clk){var s=a(h.clk),t=s[0];m=t.name,m&&!t.disabled&&"image"===t.type&&(f.push({name:m,value:s.val()}),f.push({name:m+".x",value:h.clk_x},{name:m+".y",value:h.clk_y}))}return f},a.fn.formSerialize=function(b){return a.param(this.formToArray(b))},a.fn.fieldSerialize=function(b){var c=[];return this.each(function(){var d=this.name;if(d){var e=a.fieldValue(this,b);if(e&&e.constructor===Array)for(var f=0,g=e.length;f<g;f++)c.push({name:d,value:e[f]});else null!==e&&void 0!==e&&c.push({name:this.name,value:e})}}),a.param(c)},a.fn.fieldValue=function(b){for(var c=[],d=0,e=this.length;d<e;d++){var f=this[d],g=a.fieldValue(f,b);null===g||void 0===g||g.constructor===Array&&!g.length||(g.constructor===Array?a.merge(c,g):c.push(g))}return c},a.fieldValue=function(b,c){var d=b.name,e=b.type,f=b.tagName.toLowerCase();if(void 0===c&&(c=!0),c&&(!d||b.disabled||"reset"===e||"button"===e||("checkbox"===e||"radio"===e)&&!b.checked||("submit"===e||"image"===e)&&b.form&&b.form.clk!==b||"select"===f&&b.selectedIndex===-1))return null;if("select"===f){var g=b.selectedIndex;if(g<0)return null;for(var h=[],i=b.options,j="select-one"===e,k=j?g+1:i.length,l=j?g:0;l<k;l++){var m=i[l];if(m.selected&&!m.disabled){var n=m.value;if(n||(n=m.attributes&&m.attributes.value&&!m.attributes.value.specified?m.text:m.value),j)return n;h.push(n)}}return h}return a(b).val().replace(/\r?\n/g,"\r\n")},a.fn.clearForm=function(b){return this.each(function(){a("input,select,textarea",this).clearFields(b)})},a.fn.clearFields=a.fn.clearInputs=function(b){var c=/^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;return this.each(function(){var d=this.type,e=this.tagName.toLowerCase();c.test(d)||"textarea"===e?this.value="":"checkbox"===d||"radio"===d?this.checked=!1:"select"===e?this.selectedIndex=-1:"file"===d?/MSIE/.test(navigator.userAgent)?a(this).replaceWith(a(this).clone(!0)):a(this).val(""):b&&(b===!0&&/hidden/.test(d)||"string"==typeof b&&a(this).is(b))&&(this.value="")})},a.fn.resetForm=function(){return this.each(function(){var b=a(this),c=this.tagName.toLowerCase();switch(c){case"input":this.checked=this.defaultChecked;case"textarea":return this.value=this.defaultValue,!0;case"option":case"optgroup":var d=b.parents("select");return d.length&&d[0].multiple?"option"===c?this.selected=this.defaultSelected:b.find("option").resetForm():d.resetForm(),!0;case"select":return b.find("option").each(function(a){if(this.selected=this.defaultSelected,this.defaultSelected&&!b[0].multiple)return b[0].selectedIndex=a,!1}),!0;case"label":var e=a(b.attr("for")),f=b.find("input,select,textarea");return e[0]&&f.unshift(e[0]),f.resetForm(),!0;case"form":return("function"==typeof this.reset||"object"==typeof this.reset&&!this.reset.nodeType)&&this.reset(),!0;default:return b.find("form,input,label,select,textarea").resetForm(),!0}})},a.fn.enable=function(a){return void 0===a&&(a=!0),this.each(function(){this.disabled=!a})},a.fn.selected=function(b){return void 0===b&&(b=!0),this.each(function(){var c=this.type;if("checkbox"===c||"radio"===c)this.checked=b;else if("option"===this.tagName.toLowerCase()){var d=a(this).parent("select");b&&d[0]&&"select-one"===d[0].type&&d.find("option").selected(!1),this.selected=b}})},a.fn.ajaxSubmit.debug=!1});
(function(){
	var AjaxManager = {
		activeIndicatedRequestsCount: 0,

		add: function(params) {
			var jqueryParams = $.extend({}, {
				type: 'POST',
				dataType: 'json',
				indicate: true,
				success: function() {}
			}, params);

			var t = this;

			jqueryParams.success = function(response, textStatus, XMLHttpRequest){
				if (response.bc_ajax_messages !== undefined) {
					var allIsOk = true;
					var backgroundTaskToTrack = false;
					var jsMethodsToCall = [];
					for (var i in response.bc_ajax_messages) { if (!response.bc_ajax_messages.hasOwnProperty(i)) continue;
						var msg = response.bc_ajax_messages[i];

						if (msg.type == 'backgroundTaskProgress') {
							backgroundTaskToTrack = msg.key;
						} else if (msg.type == 'callJsMethod') {
							jsMethodsToCall.push(msg.body);
						} else if (msg.type == 'onLoadMsg') {
							Bc.Informer.setOnLoadMsg($.extend({}, msg, {type: 'ok'}));
						} else {
							Bc.Informer.showMsg(msg);
						}

						if (msg.type == 'error') {
							allIsOk = false;
						}
					}

					if (backgroundTaskToTrack) {
						Bc.BackgroundTask.track({
							key: backgroundTaskToTrack,
							jqueryParams: jqueryParams,
							indicate: jqueryParams.indicate,
							success: function () {
								t.runAjax(jqueryParams);
							}
						});
					} else {
						if (allIsOk) {
							var jsMethodsProcessor = function(messages, handler) {
								if (messages.length) {
									var method = messages.pop();
									Bc.Array.getByPath(window, method.name).call(
										Bc.Array.getByPath(window, method.name.replace(/\.[^.]+$/, '')),
										method.options,
										function () { jsMethodsProcessor(messages, handler); }
									);
								} else {
									handler.call();
								}
							};

							jsMethodsProcessor(jsMethodsToCall, function() {
								params.success && params.success(response.bc_ajax_data);
							});
						} else {
							params.failure && params.failure(response.bc_ajax_data);
						}
					}
				} else {
					if (response.errors) {
						Bc.Informer.showMsg({ type: 'error', body: response.errors});
						return;
					}

					if(response.status !== 'ok'){
						t.showAjaxError(XMLHttpRequest);
						return;
					}

					params.success(response);
				}
			};

			this.runAjax(jqueryParams);
		},

		runAjax: function (jqueryParams) {
			if (jqueryParams.form) {
				$(jqueryParams.form).ajaxSubmit(jqueryParams);
			} else {
				return $.ajax(jqueryParams);
			}
		},

		showAjaxError: function(XMLHttpRequest){
			console.log('showAjaxError');
			console.log(XMLHttpRequest.responseText);
			Bc.Informer.showMsg({
				type: 'debug',
				body: '<b>AJAX ошибка</b><br/>' + XMLHttpRequest.responseText
			});
		}
	};
	
	Bc.Ajax = function(params){ return AjaxManager.add(params); };

	Bc.Fetch = function (o) {
		return new Promise(function(successHander, failureHandler) {
			Bc.Ajax($.extend({}, o, {
				success: function (response) {
					successHander(response);
				},
				failure: function () {
					failureHandler();
				}
			}));
		});
	};

	Bc.Ajax.startIndication = function() {
		AjaxManager.activeIndicatedRequestsCount++;
		AjaxLoader.show();
	};

	Bc.Ajax.stopIndication = function() {
		AjaxManager.activeIndicatedRequestsCount--;
		if (AjaxManager.activeIndicatedRequestsCount === 0) {
			AjaxLoader.hide();
		}
	};

	let AjaxLoader = {
		loaderClassName: 'ajax-process',
		show: function(){
			$(document.body).addClass(this.loaderClassName);
		},
		hide: function(){
			$(document.body).removeClass(this.loaderClassName);
		}
	};

	$(document).ajaxSend(function(event, XMLHttpRequest, options){
		if (options.indicate === true) {
			Bc.Ajax.startIndication();
		}
	});

	$(document).ajaxComplete(function(event, XMLHttpRequest, options){
		if (options.indicate === true) {
			Bc.Ajax.stopIndication();
		}
	});

	// $(document).ajaxStop(function(a, b, c){
	// 	console.log('ajaxStop');
	// 	console.log(a, b, c);
	// 	Bc.Ajax.stopIndication();
	// });

	$(document).ajaxError(function(event, XMLHttpRequest, options, thrownError){
		(options.indicate === true) && AjaxManager.showAjaxError(XMLHttpRequest);
	});
})();
(function () {
	var BackgroundTaskTracker = function (o) {
		this._state = 'tracking';
		this.o = $.extend({}, {
			indicate: false
		}, o);
		this._messagesIndex = [];

		this.o.jqueryParams && this.o.jqueryParams.indicate && Bc.Ajax.startIndication();

		this._updateStatus();
	};

	BackgroundTaskTracker.prototype = {
		o: null,

		_state: 'idle',

		_messagesIndex: [],

		_updateStatus: function () {
			let ajaxUrlDomain;
			if (this.o.jqueryParams && this.o.jqueryParams.url && this.o.jqueryParams.url.match(/^http.*$/)) {
				let a = document.createElement('a');
				a.href = this.o.jqueryParams.url;
				ajaxUrlDomain = '//' + a.hostname;
			} else {
				ajaxUrlDomain = location.origin;
			}

			Bc.Ajax({
				url: ajaxUrlDomain + '/ajax/ajax-get-background-task-progress',
				data: {
					key: this.o.key
				},
				indicate: false,
				success: $.proxy(this._onProgressLoad, this)
			});
		},

		_onProgressLoad: function (data) {
			if (data.msgList) {
				for (var i = 0; i < data.msgList.length; i++) {
					if (this._messagesIndex[i]) {
						this._messagesIndex[i] = Bc.Informer.showMsg($.extend(data.msgList[i], {
							msgToReplace: this._messagesIndex[i],
							scrollTo: false
						}));
					} else {
						this._messagesIndex[i] = Bc.Informer.showMsg($.extend(data.msgList[i], {
							scrollTo: false
						}));
					}
				}
			}

			if (data.finishTime) {
				this._state = 'idle';
				this.o.jqueryParams && this.o.jqueryParams.indicate && Bc.Ajax.stopIndication();

				if (data.finishMsg) {
					Bc.Informer.setOnLoadMsg(data.finishMsg);
				}

				this.o.success && this.o.success(data);
			} else {
				// если с сервера пришла ошибка, больше не беспокоим его запросами
				if (data['msgList'] != undefined && data['msgList'][0].type == 'error') {
					this.o.jqueryParams && this.o.jqueryParams.indicate && Bc.Ajax.stopIndication();
					console.log('Error response from BgTask');
				} else {
					setTimeout($.proxy(this._updateStatus, this), 1500);
				}
			}
		}
	};

	Bc.BackgroundTask = {
		o: null,

		_messagesToRemove: [],

		_state: 'idle',

		track: function (o) {
			var tracker = new BackgroundTaskTracker(o);
		}
	};
})();

Bc.Array = {
	listToTree: function(list, params) {
		params = $.extend({
			parentField: 'parent',
			idField: 'id',
			rootId: 0
		}, params || {});

		this._tree = {
			childs: {},
			allChilds: {},
			parents: {},
			list: {},
			treeList: []
		};

		this._tree.list[params.rootId] = {};

		this._tree.parents[params.rootId] = [];
		this._tree.treeList.push({ id: params.rootId, level: 0 });

		for (var i in list) {
			var elem = this.clone(list[i]);
			var id = elem[params.idField];
			var parentId = elem[params.parentField] || params.rootId;

			this._tree.list[id] = elem;
			this._tree.childs[parentId] = this._tree.childs[parentId] || [];
			this._tree.childs[parentId].push(id);
		}

		if (this._tree.childs[params.rootId]) {
			this._listToTreeProcessSubTree(params.rootId, 1, []);
		}

		return this._tree;
	},

	_listToTreeProcessSubTree: function(rootId, level, parents) {
		this._tree.allChilds[rootId] = this._tree.childs[rootId] || [];

		for (var i in this._tree.childs[rootId]) {
			var childId = this._tree.childs[rootId][i];
			var childParents = this.clone(parents);
			childParents.push(childId);

			this._tree.treeList.push({ id: childId, level: level });
			this._tree.parents[childId] = childParents;

			if (this._tree.childs[childId]) {
				this._listToTreeProcessSubTree(childId, level + 1, childParents);
				this._tree.allChilds[rootId] = this._tree.allChilds[rootId].concat(this._tree.allChilds[childId]);
			}
		}
	},

	clone: function(obj) {
		// Handle the 3 simple types, and null or undefined
		if (null == obj || "object" != typeof obj) return obj;

		// Handle Date
		if (obj instanceof Date) {
			var copy = new Date();
			copy.setTime(obj.getTime());
			return copy;
		}

		// Handle Array
		if (obj instanceof Array) {
			var copy = [];
			for (var i = 0, len = obj.length; i < len; ++i) {
				copy[i] = this.clone(obj[i]);
			}
			return copy;
		}

		// Handle Object
		if (obj instanceof Object) {
			var copy = {};
			for (var attr in obj) {
				if (obj.hasOwnProperty(attr)) copy[attr] = this.clone(obj[attr]);
			}
			return copy;
		}

		throw new Error("Unable to copy obj! Its type isn't supported.");
	},

	inArray: function(needle, haystack, strict) {
		var found = false, key, strict = !!strict;

		for (key in haystack) {
			if ((strict && haystack[key] === needle) || (!strict && haystack[key] == needle)) {
				found = true;
				break;
			}
		}

		return found;
	},

	objToCode: function (obj) {
		if(typeof JSON === 'object' && typeof JSON.stringify === 'function') {
			return JSON.stringify(obj);
		}

		var t = typeof(obj);
		if (t != "object" || obj === null || obj === undefined) {
			if (t == "string") {
				var strToJsonReplace = [ [/\\\\/g,'\\\\'], [/\n/g,'\\n'], [/\t/g,'\\t'], [/\f/g,'\\f'], [/"/g,'\"'] ];

				for (var i = 0; i < strToJsonReplace.length; i++) {
					var rule = strToJsonReplace[i];
					obj = obj.replace(rule[0], rule[1]);
				}

				obj = '"' + obj + '"';
			}
			return String(obj);
		} else {
			var n, v, json = [], arr = (obj && obj.constructor == Array);
			for (n in obj) {
				if (!obj.hasOwnProperty(n)) { continue; }
				v = obj[n]; t = typeof(v);

				json.push((arr ? "" : '"' + n + '":') + this.objToCode(v));
			}
			return (arr ? "[" : "{") + String(json) + (arr ? "]" : "}");
		}
	},

	codeToObj: function(code) {
		try {
			var data = eval('(' + code + ')');
		} catch (e) {
			return null;
		}

		return data;
	},

	getByPath: function(array, path) {
		var pathArray = this._pathToArray(path);

		var result = array;
		for (var i = 0; i < pathArray.length; i++) {
			var index = pathArray[i];

			if (result[index]) {
				result = result[index];
			} else {
				return '';
			}
		}

		return result;
	},

	setByPath: function(array, path, value) {
		var pathArray = this._pathToArray(path);

		var parent = array;
		for (var i = 0; i < pathArray.length; i++) {
			var index = pathArray[i];

			if (index == 'PATH_TO_ARRAY_INCREMENT_INDEX') {
				index = this.getLength(parent);
			}

			if (i == pathArray.length - 1) {
				parent[index] = value;
			} else {
				parent[index] = parent[index] || {};
			}

			parent = parent[index];
		}
	},

	formToObj: function(form) {
		var rawItems = $(form).serializeArray();

		var items = {};
		for (var i in rawItems) { if (!rawItems.hasOwnProperty(i)) continue;
			var rawItem = rawItems[i];
			this.setByPath(items, rawItem.name, rawItem.value);
		}

		return items;
	},

	getLength: function(object) {
		var length = 0;
		for (var key in object) {
			if (object.hasOwnProperty(key)) length++;
		}

		return length;
	},

	_pathToArray: function(path) {
		var rawPathArray = path.replace(/\[\]/, '[PATH_TO_ARRAY_INCREMENT_INDEX]').split(/[\[\].]+/);
		var pathArray = [];

		for (var i = 0; i < rawPathArray.length; i++) {
			if (rawPathArray[i] == "") { continue; }
			pathArray.push(rawPathArray[i]);
		}

		return pathArray;
	},

	toFlatArray: function (data) {
		let flatArray = {};

		this._toFormArraySys(data, flatArray, '', 0);

		return flatArray;
	},

	_toFormArraySys: function(data, flatArray, path, depth) {
		let childIndex = 0;
		for (let childKey in data) { if (!data.hasOwnProperty(childKey)) continue;
			let childPath;
			if (depth === 0) {
				childPath = childKey;
			} else {
				childPath = path + '[' + childKey + ']';
			}

			let childValue = data[childKey];

			if (childValue instanceof Array || childValue instanceof Object) {
				this._toFormArraySys(
					childValue,
					flatArray,
					childPath,
					depth + 1
				);
			} else {
				flatArray[childPath] = childValue;
			}

			childIndex++;
		}
	},

	firstKey: function (object) {
		let firstKey = null;
		for (let i in object) { if (!object.hasOwnProperty(i)) continue;
			firstKey = i;
		    break;
		}

		return firstKey;
	}
};
Bc.Cache = {

	_storageEnabled : null,
	
	enableStorage: function() {
		this._storageEnabled = this._isLocalStorageAvailable();
	},
		
	_isLocalStorageAvailable: function () {
		try {
			return 'localStorage' in window && window['localStorage'] !== null;
		} catch (e) {
			return false;
		}
	},
		
	set: function(key, value, lifeTime) {
		var now = new Date();
		var cache = {
			value: value,
			expiration: now.getTime() + lifeTime * 1000
		};
		
		if(this._storageEnabled) {
			try{
				localStorage.setItem(key, JSON.stringify(cache));
			} catch(e) {
				if(e == window.QUOTA_EXCEEDED_ERR) {
					console.log('Превышен размер локального хранилища');
				}
			}
			
		}
	},
		
	get: function(key) {
		if(this._storageEnabled) {
			var now = new Date();
			var cache = JSON.parse(localStorage.getItem(key));
			if(cache != null && cache.expiration > now.getTime()) {
				return cache.value;
			}
			
		}
		return null;
	}
};

Bc.Cache.enableStorage();
Bc.Cookie = {
	set: function(name, value, time) {
		if (value !== null && value !== '') {
			this._setHeader(name, value, time);
		}
	},

	get: function(name) {
		var res = document.cookie.match(new RegExp(name + '=([^;]*)'));
		return (res && res[1] ? decodeURIComponent(res[1]) : null);
	},

	remove: function(name) {
		// set expire time to one year later
		this._setHeader(name, '', -365 * 24);
	},
	
	setHash: function(name, hash){
		var valueArray = [];
		for(var elemName in hash){
			if(!hash.hasOwnProperty(elemName)){ continue; }
			
			valueArray.push(elemName);
			valueArray.push(hash[elemName].toString().replace(':','t:'));
		}
		this.set(name, valueArray.join('s:'));
	},
	
	getHash: function(name){
		var cookieValue = this.get(name);
		if(!cookieValue){ return null; }
		var elems = cookieValue.split('s:');
		
		var hash = {};
		for(var i = 0, l = elems.length; i < l; i = i + 2){
			hash[elems[i]] = elems[i+1].replace('t:', ':');
		}
		return hash;
	},
	
	_getHeader: function(name, value, time, domain, path) {
		var kookie = [];
	
		kookie.push(name + '=' + encodeURIComponent(value));
	
		if (typeof time == 'number') {
			var expire = new Date();
	
			expire.setTime(expire.getTime() + (time * 3600000));
			kookie.push('expires=' + expire.toGMTString());
		}

		if (domain) {
			kookie.push('domain=' + domain);
		}
	
		kookie.push('path=' + (path || '/'));
	
		return kookie.join(';');
	},
	
	_setHeader: function(name, value, time, domain, path) {
		document.cookie = this._getHeader(name, value, time, domain, path);
	}
};
Bc.Url = {
	_changeEventTimer: null,

	_hashDefaults: {},

	get: function(name) {
		let data = this._searchPartToData(true);

		if (name) {
			return data[name] || '';
		} else {
			return data;
		}
	},

	getModifiedZendUrl: function (name, value) {
		let regExp = new RegExp('\\/' + name + '\\/[^\\/]+\\/');
		let setValue = '/' + name + '/' + value + '/';

		if (location.pathname.match(regExp)) {
			return location.pathname.replace(regExp, setValue);
		} else {
			return location.pathname.replace(/\/?$/, setValue);
		}
	},

	setZend: function(name, value) {
		location.pathname = this.getModifiedZendUrl(name, value);
	},

	set: function(name, value) {
		var data = this._searchPartToData();
		data[name] = value;

		var searchPart = this._dataToSearchPart(data);

		if (searchPart) {
			location.search = searchPart;
		} else {
			location.href = location.origin + location.pathname;
		}
	},

	getHash: function(name) {
		var attrs = $.extend({}, this._hashDefaults, this._getAttrsFromHash())

		return (name ? attrs[name] : attrs);
	},

	setHash: function(name, value) {
		var attrs = this._getAttrsFromHash();

		if (
			this._hashDefaults[name] &&
			Bc.Array.objToCode(this._hashDefaults[name]) == Bc.Array.objToCode(value)
		) {
			if (attrs[name]) {
				delete attrs[name];
			}
		} else {
			attrs[name] = value;
		}

		this._setUrlHash(attrs);
	},

	setHashDefault: function (name, value) {
		this._hashDefaults[name] = value;
	},

	removeHash: function(name) {
		var hashAttrs = this._getAttrsFromHash();
		if (hashAttrs[name]) {
			delete hashAttrs[name];

			this._setUrlHash(hashAttrs);
		}
	},

	getModifiedParameters: function (data){
		return this._dataToSearchPart(data)
	},

	_setUrlHash: function(attrs) {
		var hash = Bc.Array.objToCode(attrs);

		if (hash == '{}') {
			history.pushState('', document.title, window.location.pathname);
		} else {
			location.hash = hash;
		}
	},

	_getAttrsFromHash: function() {
		var hashCode = location.hash.toString().replace(/^.*#/, '');
		if (!hashCode) {
			return {};
		}

		return Bc.Array.codeToObj(decodeURIComponent(hashCode)) || {};
	},

	_searchPartToData: function(decodeValue) {
		searchPart = location.search;
		searchPart = searchPart.replace(/^\?/, '');
		searchPart = searchPart.split('&');

		var data = {};
		for (var i = 0; i < searchPart.length; i++) {
			var searchPartItem = searchPart[i].split('=');
			if (!searchPartItem[0]) continue;

			Bc.Array.setByPath(
				data,
				decodeURIComponent(searchPartItem[0]),
				(searchPartItem.length == 1) ?
					true
				: (decodeValue ? decodeURIComponent(searchPartItem[1]) : searchPartItem[1])
			);
		}

		return data;
	},

	_dataToSearchPart: function(data) {
		var searchPart = [];

		this._dataToSearchPartSys(
			data,
			searchPart,
			'',
			0
		);

		if (searchPart.length > 0) {
			return '?' + searchPart.join('&');
		} else {
			return '';
		}
	},

	_dataToSearchPartSys: function(data, searchPart, path, depth) {
		var childIndex = 0;
		for (var childKey in data) { if (!data.hasOwnProperty(childKey)) continue;
			if (depth === 0) {
				var childPath = childKey;
			} else {
				if (parseInt(childKey) === childIndex) {
					var childPath = path + '[]';
				} else {
					var childPath = path + '[' + childKey + ']';
				}
			}

			var childValue = data[childKey];

			if (childValue === true) {
				searchPart.push(childPath);
			} else if (childValue instanceof Array || childValue instanceof Object) {
				this._dataToSearchPartSys(
					childValue,
					searchPart,
					childPath,
					depth + 1
				);
			} else if (childValue !== false && childValue !== null) {
				searchPart.push(childPath + '=' + childValue);
			}

			childIndex++;
		}
	}
};
﻿Bc.Dialog = {
	_isInited: false,
	
	confirm: function(params) {
		if(!this._isInited){
			this._init(params);
		}

		this.$dialog.html(params.body);
		this.$dialog.parent().addClass(params.classDialog);

		this.$dialog.dialog('option', {
			title: params.title,
			width: params.width,
			resizable: params.resizable === false ? false : true,
			open: params.open || null,
			dialogClass: params.dialogClass || null,
			beforeClose: params.beforeClose || null,
			close: params.close || null,
			modal: params.modal === false ? false : true,
			buttons: params.buttons || [
				{
					text: params.yesButtonText || "Да",
					'class': 'yes-button',
					click: function() {
						//поменял вызовы местами ( не обходимо было для журнала событий в трм карточке тендера)
						// раньше тут вовсе close не было, так что влияния тут явно немного
						params.handler();
						if (params.closeOnYes !== false) {
							$(this).dialog("close");
						}
					}
				},
				{
					text: params.noButtonText || "Нет",
					'class': 'no-button',
					click: function() {
						if (params.noHandler) {
							params.noHandler();
						}

						$(this).dialog("close");
					}
				}
			],
            position: null
		});

		this.$dialog.dialog("open");
	},

	alert: function(params) {
		if(!this._isInited){
			this._init(params);
		}

		this.$dialog.html(params.body);
		this.$dialog.dialog('option', {
			title: params.title,
			width: params.width,
			resizable: false,
			open: params.open || null,
			dialogClass: params.dialogClass || null,
			beforeClose: params.beforeClose || null,
			buttons: params.buttons || [
				{
					text: params.buttonText || 'OK',
					'class': 'yes-button',
					click: function() {
						$(this).dialog("close");
						params.handler && params.handler();
					}
				}
			],
            position: null
		});
		
		this.$dialog.dialog("open");
	},
	
	modal: function(params) {
		if(!this._isInited){
			this._init(params);
		}

		this.$dialog.html(params.body);
		this.$dialog.parent().addClass(params.classDialog);

		params = $.extend({autoOpen: true}, params);

		this.$dialog.dialog('option', {
			title: params.title,
			width: params.width,
			height: params.height || 'auto',
			draggable: params.draggable || false,
			closeOnEscape: true,
			resizable: false,
			open: params.open || null,
			beforeClose: params.beforeClose || null,
			close: function() {
				if (params.close) {
                    params.close();
				}
			},
			dialogClass: params.dialogClass || null,
			buttons: params.buttons || [
				{
					text: params.buttonTextOk || "OK",
					'class': 'yes-button',
					click: function () {
						if (params.handler() != -1) {
							$(this).dialog("close");
						}
					}
				},
				{
					text: params.buttonTextClose || "Закрыть",
					'class': 'no-button',
					click: function () {
						$(this).dialog("close");
					}
				}
			],
			position: params.position || null,
			modal: params.modal !== false,
		});

		if (params.autoOpen) {
			this.$dialog.dialog("open");
		}
	},

	close: function() {
		if (!this.$dialog) {
			return;
		}

        this.$dialog.dialog('close');
	},

	isOpened: function() {
		if (!this.$dialog) {
			return false;
		}

		this.$dialog.dialog('isOpen');
	},

	open: function() {
		if (!this.$dialog) {
			return;
		}

		this.$dialog.dialog('open');
	},
	
	_init: function(params) {
		this._isInited = true;
        this.isCrm = window.location.pathname.indexOf('/crm/') >= 0;

		if (params) {
			this._params = params;
		}

		var t = this;

        this.$dialog = $('<div></div>');

        this.$dialog.on("dialogcreate", function() {
        	var $dialogWrapper = $('<div class="ui-popup-wrapper"></div>');
            $dialogWrapper.appendTo('body');
            t.$dialog.parent().appendTo($dialogWrapper);
        });

        this.$dialog.on("dialogopen", function() {
        	$('body').addClass('overflow-hidden scroll-stub');

        	if (t.isCrm) {
                $('html').addClass('overflow-hidden html-scroll-fix');
			}
		});

        this.$dialog.on("dialogclose", this._onDialogClose.bind(this));

		this.$dialog.dialog({
            autoOpen: false,
            modal: this._params.modal !== false
        });
    },

    _onDialogClose: function() {
        this._isInited = false;

        if (this._params && this._params.classDialog) {
            this.$dialog.parent().removeClass(this._params.classDialog);
        }

        this._params = null;

        $('body').removeClass('overflow-hidden scroll-stub');

        if (this.isCrm) {
            $('html').removeClass('overflow-hidden html-scroll-fix');
        }

        this.isCrm = null;

        $('.ui-popup-wrapper').remove();
	}
};

Bc.Informer = {
	_msgTypeCLass: {
		'ok': 'success-block',
		'msg': 'success-block',
		'success': 'success-block',
		'shadowed': 'shadowed-block',
		'alert': 'alert-block',
		'error': 'error-block',
		'debug': 'info-block',
		'warn': 'info-block',
		'info': 'info-block'
	},

	$floatingDiv: null,
	$popupMsgBox: null,

	showNewNewsPopup: function(popupConfig) {
		if (!popupConfig) {
			return;
		}

		popupConfig.onClose = function($event) {
			var article_id = $('[data-article-id]', $event).data('article-id');

			$.ajax({
				type: 'POST',
				url: '/tc/news/ajax-mark-popup-as-read/',
				data: {article_id : article_id},
				success: function (response) {}
			});
		};

		Bc.Informer.popupMsg(popupConfig);
	},

	showMsg: function(params) {
		if (typeof params == 'string') {
			params = { body: params };
		}

		params.type = params.type || 'ok';
		params = $.extend({ scrollTo: true }, params);
		var $msg = $(
			'<div class="' + this._msgTypeCLass[params.type] + ' tc-informer-wraper">'+
				'<i onclick="$(this).parent().slideUp(\'fast\');" class="icon-close"></i>'+
				'<div class="text"></div>' +
			'</div>'
		);
		var $msgBody = $msg.find('.text');

		if(typeof params.body == 'string'){
			$msgBody.html(this._formatMsg(params));
		} else {
			var msgHtml = [];
			msgHtml.push('<ul>');
			for(var i in params.body){
				msgHtml.push('<li>' + this._getMsgText(params.body[i]) + '</li>');
			}
			msgHtml.push('</ul>');

			$msgBody.html(msgHtml.join(''));
		}

		$msg.click(function(e){ if(e.ctrlKey) $msg.remove(); });

		if (params.msgToReplace) {
			params.msgToReplace.replaceWith($msg);
		} else {
			$msg.appendTo(this.$msgBox);
		}

		if(params.type == 'ok' || (params.decor !== undefined && params.decor !== null && params.decor && params.decor.match(/fadeout/))){
			setTimeout(function(){ $msg.fadeOut(); }, 8000);
		}

		if(params.scrollTo){
			window.scrollTo(0, 0);
		}

		Bc.WidgetManager.initIn(this.$msgBox);

		return $msg;
	},

	lock: function() {
		Bc.WidgetManager.onPageLoad(function() {
			$('#js-Informer').data('bcWidget').lockToTop();
		});
	},

	floatMsg: function(params) {
		if (typeof params == 'string') {
			params = { body: params };
		}

		params = $.extend(
			{
				floatingDivSelector: '#js-Informer'
			},
			params
		);

		if(!this.$floatingDiv){
			if ($(params.floatingDivSelector).length) {
				this.$floatingDiv = $(params.floatingDivSelector);
			} else {
				this.$floatingDiv = $('<div></div>')
					.css({
						position: 'fixed',
						left: '0px',
						top: '30px',
						width: '100%',
						zIndex: 50
					});

				this.$floatingDiv.appendTo('body');
			}
		}

		params = $.extend({
			closeDelay: 4000,
			type: 'ok'
		}, params);

		var closeMsg = function($msg) {
			$msg.slideUp(
				'fast',
				function(){
					$(this).remove();
				}
			);
		};

		//var $msg = $('<div class="' + this._msgTypeCLass[params.type] + '"></div>')
		var $msg = $(
			'<div class="' + this._msgTypeCLass[params.type] + '">\
				<i class="icon-close"></i>\
				<div class="text"></div>\
			</div>'
		);

		$msg
			.appendTo(params.$msgContainer || this.$floatingDiv)
			.effect('highlight')
			.click(function(e){ if(e.ctrlKey) closeMsg($msg); })
			.children('.text').html(this._formatMsg(params));

		$('.icon-close', $msg).click(function(e){ closeMsg($msg); });

		if(parseInt(params.closeDelay)) {
			setTimeout(function(){ closeMsg($msg); }, params.closeDelay);
		}
	},

	inPlaceMsg: function ($tag, o, action_name) {
		o = (typeof o == 'string') ? { body: o } : o;
		o.closeDelay = o.closeDelay || 3000;
 

		var x = $tag.offset().left + $tag.width()*2;
		var y = $tag.offset().top + 10;

		var $msg = $('<div class="change_important_icon_block' + action_name + '"/>')
			.css({ left: x + 'px', top: y + 'px' })
			.html(o.body)
			.appendTo('body');

		if (o.closeDelay) {
			setTimeout(function(){ $msg.remove(); }, o.closeDelay);
		}
	},

	setOnLoadMsg: function(o){
		o = (typeof o == 'string') ? { body: this._getMsgText(o) } : o;
		o.closeDelay = o.closeDelay || 0;
		Bc.Cookie.setHash('BcInformer', o);
	},

	popupMsg: function(params) {
		params = $.extend(
			{
				id: Bc.getUID()
			},
			params
		);

		if (this.$popupMsgBox.find('.new_event[data-event-id="' + params.id + '"]').length) {
			return;
		}

		var $msg = $(
			'<div class="new_event" data-event-id="' + params.id + '">' +
				'<div class="js-close close"></div>' +
				'<div class="wrapper_event">' +
					'<div class="header_event">' +
						'<div class="icon_event news_icon"></div>' +
						'<div class="date_event">' + params.date + '</div>' +
						'<div class="type_event">' + params.title + '</div>' +
					'</div>' +
					'<div class="description_event">' +
						'<div class="title_event">' +
							params.body +
						'</div>' +
						'<a class="button_event" href="/">Подробнее</a>' +
					'</div>' +
				'</div>' +
			'</div>'
		);

		$msg.hide();




		$(".js-close", $msg).click(function(e) {
			var
				$target = $(e.target),
				$event = $target.parent(".new_event");
			$event.fadeOut({
				complete: function() {
					if (params.onClose) {
						params.onClose($event);
					}

					$event.remove();
				}
			});
		});

		this.$popupMsgBox.prepend($msg);
		$msg.fadeIn();
	},

	clear: function(){
		this.$msgBox.html("");
	},

	init: function(){
		this.$msgBox = $('#js-Informer');
		this.$popupMsgBox = $('.js-popup-msg-wrap');

		if(!this.$msgBox.length){
			this.$msgBox = $('<div></div>').prependTo('body');
		}

		var msgData = Bc.Cookie.getHash('BcInformer');
		if(msgData){
			Bc.Cookie.remove('BcInformer');
			this.floatMsg(msgData);
		}
	},

	_getMsgText: function(msg) {
		if(Bc.page && Bc.page.msg && Bc.page.msg[msg]){
			return Bc.page.msg[msg];
		} else {
			return msg;
		}
	},

	_formatMsg: function (msg) {
		let body = this._getMsgText(msg.body);

		if (msg.args) {
			let argIndex = 0;
			body = body.replaceAll('?', function () {
				return '<b>' + msg.args[argIndex++] + '</b>';
			});
		}

		return body;
	}
};

$(function(){ Bc.Informer.init(); });
Bc.Tpl = {
	_tplFunctions: {},
	_searchedTplsFromScript: {},

	render: function(tplName, tplData, etcTplData) {
		this._addTemplateFromScript(tplName);

		if (!this._tplFunctions[tplName]) {
			console.log('Undefined template "' + tplName + '".');
			return '';
		}

		try {
			var result = this._tplFunctions[tplName](tplData, etcTplData);
		} catch (e) {
			console.log('Error while running template.');
			console.log(this._tplFunctions[tplName]);
			console.log(e);
			return '';
		}
		return result;
	},

	add: function(tplName, tplCode) {
		this._initTemplate(tplName, tplCode);
	},

	hasTemplate: function(tplName) {
		this._addTemplateFromScript(tplName);
		return !!this._tplFunctions[tplName];
	},

	_initTemplate: function(tplName, tplCode) {
		var codeLength = tplCode.length;
		var mode = 'string';
		var startElem = 0;
		var i = 0;
		var resultCode = ['var s=[];'];
		while(i < codeLength){
			switch(tplCode.charAt(i)){
				case'@':
					if(tplCode.charAt(i + 1) == ':'){
						resultCode.push(this._makeCodePart(tplCode, startElem, i, mode));

						if(tplCode.charAt(i + 2) == '='){
							i += 3;
							mode = 'echoJs';
						} else {
							i += 2;
							mode = 'js';
						}
						startElem = i;
					} else {
						i++;
					}
					break;
				case':':
					if(tplCode.charAt(i + 1) == '@'){
						resultCode.push(this._makeCodePart(tplCode, startElem, i, mode));

						i += 2;
						mode = 'string';
						startElem = i;
					} else {
						i++;
					}
					break;
				default:
					i++;
			}
		}

		if(mode == 'string' && startElem != i){
			resultCode.push(this._makeCodePart(tplCode, startElem, i, mode));
		}

		resultCode.push('return s.join(\'\');');
		this._tplFunctions[tplName] = new Function(
			'o', 'o2',
			resultCode.join('')
		);
	},

	_addTemplateFromScript: function(tplName) {
		if (this._searchedTplsFromScript[tplName]) {
			return;
		}

		var tplCode = $('#js-tpl-' + tplName.replace(/\./g, '\\.')).html();
		this._searchedTplsFromScript[tplName] = true;

		if (tplCode) {
			this._initTemplate(tplName, tplCode);
		}
	},

	_makeCodePart: function(tplCode, startElem, i, mode){
		var codePart = tplCode.substr(startElem, i - startElem);

		switch(mode){
			case 'string':
				return "s.push('" + codePart.replace(/[\r\t\n]/g, " ").replace(/'/g, "\\'") + "');\n";
				break;
			case 'echoJs':
				return "s.push(" + codePart + ");\n";
				break;
			case 'js':
				return codePart + '\n';
				break;
		}
	}
};
Bc.Str = {
	transliterate: function(str) {
		const transliterateIndex = {
			'а': 'a', 'б': 'b', 'в': 'v',
			'г': 'g', 'д': 'd', 'е': 'e',
			'ё': 'e', 'ж': 'zh', 'з': 'z',
			'и': 'i', 'й': 'y', 'к': 'k',
			'л': 'l', 'м': 'm', 'н': 'n',
			'о': 'o', 'п': 'p', 'р': 'r',
			'с': 's', 'т': 't', 'у': 'u',
			'ф': 'f', 'х': 'h', 'ц': 'c',
			'ч': 'ch', 'ш': 'sh', 'щ': 'sch',
			'ь': '', 'ы': 'y', 'ъ': '',
			'э': 'e', 'ю': 'yu', 'я': 'ya',
			'А': 'A', 'Б': 'B', 'В': 'V',
			'Г': 'G', 'Д': 'D', 'Е': 'E',
			'Ё': 'E', 'Ж': 'Zh', 'З': 'Z',
			'И': 'I', 'Й': 'Y', 'К': 'K',
			'Л': 'L', 'М': 'M', 'Н': 'N',
			'О': 'O', 'П': 'P', 'Р': 'R',
			'С': 'S', 'Т': 'T', 'У': 'U',
			'Ф': 'F', 'Х': 'H', 'Ц': 'C',
			'Ч': 'Ch', 'Ш': 'Sh', 'Щ': 'Sch',
			'Ь': '', 'Ы': 'Y', 'Ъ': '',
			'Э': 'E', 'Ю': 'Yu', 'Я': 'Ya',
		};

		let result = [];
		for (let i = 0; i < str.length; i++) {
			let symbol = str.charAt(i);
			result.push(transliterateIndex[symbol] || symbol);
		}

		result = result.join('');
		result = result.replace(/\W+/g, '-');

		return result;
	},
}
Bc.WidgetManager = {
	_loadingWidgets: {},
	_widgetsToInitOnLoad: 0,
	_isInitedOnLoad: false,
	_initInIsWorking: false,
	_onPageLoadHandlers: [],
	
	init: function(widgetName, $tag, o) {
		var tagWidgetNames = this._getTagWidgetNames($tag);
		var widgetNumber = 0;
		for (var i = 1; i <= tagWidgetNames.length; i++) {
			if (tagWidgetNames[i - 1] == widgetName) {
				widgetNumber = i;
				break;
			}
		}

		var inlineParams = {};
		if (widgetNumber > 0) {
			var optionsAttrName = (widgetNumber == 1) ? 'widgetConfig' : ('widgetConfig' + widgetNumber);

			if ($tag.data(optionsAttrName)) {
				inlineParams = $tag.data(optionsAttrName);
			} else if (widgetNumber == 1 && $tag.get(0).onclick) {
				inlineParams = $tag.get(0).onclick();
			}
		}

		o = $.extend(inlineParams, o);

		var widgetClass = Bc.widget[widgetName];

		if (undefined != widgetClass) {
			Bc.loadList(widgetClass.prototype.require || [], $.proxy(function () {
				var widgetObj = new widgetClass($tag, o);
				$tag.data('bcWidget', widgetObj);
				$tag.trigger('Bc-widgetInited', widgetObj);

				if (!$tag.data('bcWidgets')) {
					$tag.data('bcWidgets', {});
				}
				$tag.data('bcWidgets')[widgetName] = widgetObj;

				if (!this._isInitedOnLoad) {
					this._widgetsToInitOnLoad--;
				}
				this._checkIfAllInited();
			}, this));
		}
	},
	
	initIn: function($initArea, force){
		$initArea = $initArea || $(document);
		var t = this;
		var force = (force == undefined) ? 0 : force;

		$('[data-tooltip]', $initArea).attr('data-widget', 'tooltip');

		this._initInIsWorking = true;
		$('[class*=js-widget-]', $initArea).add('[data-widget]').each(function(){
			var $elem = $(this);
			var initIfHidden = $elem.data('widgetInitIfHidden');

			initIfHidden = (initIfHidden === undefined) ? 1 : initIfHidden;

			if ($elem.data('bcWidget')) return;

			if (!force && !initIfHidden && !$elem.is(':visible')) return;
			
			t._initWidgetsInTag($elem);
		});
		this._initInIsWorking = false;

		this._checkIfAllInited();
	},

	define: function(widgetName, widgetBody) {
		Bc.widget = Bc.widget || {};

		Bc.widget[widgetName] = function($elem, o) {
			o = o || {};
			this.$elem = this.$tag = $elem;
			this.o = o;

			for (var key in this) {
				if (key == 'o' || key == 'name') continue;
				if (!key.charAt(0).match(/[a-z]/)) continue;
				if (typeof this[key] == 'function') continue;

				if ($elem.data(key)) this[key] = $elem.data(key);
			}

			$elem.data('bcWidget', this);

			this.init($elem, o, this);
		};

		widgetBody.name = widgetName;

		Bc.widget[widgetName].prototype= widgetBody;
	},

	onPageLoad: function(handler) {
		if (this._isInitedOnLoad) {
			handler.call();
		} else {
			this._onPageLoadHandlers.push(handler);
		}
	},

	_getTagWidgetNames: function($tag) {
		var widgetNames = [];
		if ($tag.jsAttr('widget')) {
			widgetNames.push($tag.jsAttr('widget'));
		}

		if ($tag.data('widget')) {
			var widgets = $tag.data('widget').match(/[\/\w]+/g);
			for (var i in widgets) { if (!widgets.hasOwnProperty(i)) continue;
				widgetNames.push(widgets[i]);
			}
		}

		for (var j in widgetNames) { if (!widgetNames.hasOwnProperty(j)) continue;
			if (widgetNames[j].match(/^\w+$/)) {
				widgetNames[j] = widgetNames[j][0].toUpperCase() + widgetNames[j].slice(1);
			}
		}

		return widgetNames;
	},
	
	_initWidgetsInTag: function($tag){
		$tag.data('bcWidget', true);

		var widgetNames = this._getTagWidgetNames($tag);

		if (!this._isInitedOnLoad) {
			this._widgetsToInitOnLoad += widgetNames.length;
		}

		for (var widgetNumber = 0; widgetNumber < widgetNames.length; widgetNumber++) {
			var widgetName = widgetNames[widgetNumber];

			if(typeof Bc.widget[widgetName] == 'function') {
				this.init(widgetName, $tag, this);
			} else {
				if(!this._loadingWidgets[widgetName]) {
					this._loadingWidgets[widgetName] = [];

					(function (t, widgetName) {
						Bc.loadScript('widgets/' + widgetName + '.js', function() {
							t._initWidgetsOnSourceLoad(widgetName);
						});
					})(this, widgetName);
				}

				this._loadingWidgets[widgetName].push($tag);
			}
		}
	},
	
	_initWidgetsOnSourceLoad: function(widgetName){
		var $widgetsToInit = this._loadingWidgets[widgetName];

		for (var i = 0; i < $widgetsToInit.length; i++) {
			this.init(widgetName, $widgetsToInit[i], this);
		}
		
		delete this._loadingWidgets[widgetName];
	},

	_checkIfAllInited: function() {
		if (this._widgetsToInitOnLoad == 0 && !this._isInitedOnLoad && !this._initInIsWorking) {
			this._isInitedOnLoad = true;

			setTimeout($.proxy(function(){
				for (var i in this._onPageLoadHandlers) { if (!this._onPageLoadHandlers.hasOwnProperty(i)) continue;
					this._onPageLoadHandlers[i].call();
				}
			}, this), 1);
		}
	},

	triggerOnLoad: function(eventName, eventData) {
		Bc.WidgetManager.onPageLoad(function() {
			$(document).trigger(eventName, [eventData]);
		});
	}
};

$(function(){
	Bc.WidgetManager.initIn();
});
Bc.SiteRegistrationTracker = {
	areWidgetsInitialized: false,

	yaClientId: null,

	formsRegistered: {},
	formsToSend: [],

	init: function () {
		let self = this;

		Bc.WidgetManager.onPageLoad(function() {
			self.areWidgetsInitialized = true;

			if (self.formsToSend.length && !window.Bc_isLoggedIn) {
				self.sendButtonsShownData(self.formsToSend);
			}
		});
	},

	registerFormButtonView: function (meta) {
		let key = meta.formClass + '_' + (meta.formSubType || '');
		if (this.formsRegistered[key]) {
			return;
		} else {
			this.formsRegistered[key] = true;
		}

		if (this.areWidgetsInitialized) {
			this.sendButtonsShownData([meta]);
		} else {
			this.formsToSend.push(meta);
		}
	},

	sendButtonsShownData: function (formsToSend) {
		Bc.yaGetClientId(function (yandexClientId) {
			Bc.Ajax({
				url: '/registration/ajax-log-action/',
				indicate: false,
				data: {
					action: 'popupButtonView',
					forms: formsToSend,
					registrationUrl: location.href,
					yandexClientId: yandexClientId
				}
			});
		});
	}
}
Bc.SiteRegistrationTracker.init();
Bc.Date = {
	clock: function(){
		var currentTime = new Date(); 
		var currentHours = currentTime.getHours(); 
		var currentMinutes = currentTime.getMinutes(); 
		var currentSeconds = currentTime.getSeconds(); 
		currentMinutes = (currentMinutes < 10 ? "0" : "") + currentMinutes; 
		currentSeconds = (currentSeconds < 10 ? "0" : "") + currentSeconds; 
		$('#today_hour_min').text(currentHours + ':' + currentMinutes);
		$('#today_sec').css({"font-size":"9px", "vertical-align":"text-top"}).text(currentSeconds);
	},
	days :{
		0:'Воскресенье', 
		1:'Понедельник', 
		2:'Вторник', 
		3:'Среда', 
		4:'Четверг', 
		5:'Пятница', 
		6:'Суббота'
	},

	months : {
		0:'января', 
		1:'Февраля', 
		2:'марта', 
		3:'апреля', 
		4:'мая', 
		5:'июня', 
		6:'июля',
		7:'августа', 
		8:'сентября', 
		9:'октября', 
		10:'ноября', 
		11:'декабря'
	},
	monthsSingularly : {
		0:'январь',
		1:'февраль',
		2:'март',
		3:'апрель',
		4:'май',
		5:'июнь',
		6:'июль',
		7:'август',
		8:'сентябрь',
		9:'октябрь',
		10:'ноябрь',
		11:'декабрь'
	},
	showTime: function(){
		var currentTime = new Date();
		var currentDay = this.days[currentTime.getDay()];
		var currentDate = currentTime.getDate();
		var currentMonth = this.months[currentTime.getMonth()];
		var currentYear = currentTime.getFullYear();
		$('#today_date').text(currentDate + ' ' + currentMonth + ' ' + currentYear + ', ' + currentDay);
		this.clock(); 
		window.setInterval(this.clock, 1000);
	}
}


jQuery(function(){
	Bc.Date.showTime();
});

Bc.widget.Informer = function($elem, params) {
	this.$elem = $elem;

	this.$elem.on('click', '.js-msg .close', function(e){
		$(e.target).parents('js-msg').fadeOut();
	});

	this.$elem.on('click', '.js-alert .close', function(e){
		$(e.target).parents('js-alert').remove();
	});
};

Bc.widget.Informer.prototype = {

};
/*!
 * Bootstrap v3.0.0
 *
 * Copyright 2013 Twitter, Inc
 * Licensed under the Apache License v2.0
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Designed and built with all the love in the world @twitter by @mdo and @fat.
 */

+function(a){"use strict";var b=function(a,b){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",a,b)};b.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1},b.prototype.init=function(b,c,d){this.enabled=!0,this.type=b,this.$element=a(c),this.options=this.getOptions(d);var e=this.options.trigger.split(" ");for(var f=e.length;f--;){var g=e[f];if(g=="click")this.$element.on("click."+this.type,this.options.selector,a.proxy(this.toggle,this));else if(g!="manual"){var h=g=="hover"?"mouseenter":"focus",i=g=="hover"?"mouseleave":"blur";this.$element.on(h+"."+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(i+"."+this.type,this.options.selector,a.proxy(this.leave,this))}}this.options.selector?this._options=a.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},b.prototype.getDefaults=function(){return b.DEFAULTS},b.prototype.getOptions=function(b){return b=a.extend({},this.getDefaults(),this.$element.data(),b),b.delay&&typeof b.delay=="number"&&(b.delay={show:b.delay,hide:b.delay}),b},b.prototype.getDelegateOptions=function(){var b={},c=this.getDefaults();return this._options&&a.each(this._options,function(a,d){c[a]!=d&&(b[a]=d)}),b},b.prototype.enter=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs."+this.type);clearTimeout(c.timeout),c.hoverState="in";if(!c.options.delay||!c.options.delay.show)return c.show();c.timeout=setTimeout(function(){c.hoverState=="in"&&c.show()},c.options.delay.show)},b.prototype.leave=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs."+this.type);clearTimeout(c.timeout),c.hoverState="out";if(!c.options.delay||!c.options.delay.hide)return c.hide();c.timeout=setTimeout(function(){c.hoverState=="out"&&c.hide()},c.options.delay.hide)},b.prototype.show=function(){var b=a.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(b);if(b.isDefaultPrevented())return;var c=this.tip();this.setContent(),this.options.animation&&c.addClass("fade");var d=typeof this.options.placement=="function"?this.options.placement.call(this,c[0],this.$element[0]):this.options.placement,e=/\s?auto?\s?/i,f=e.test(d);f&&(d=d.replace(e,"")||"top"),c.detach().css({top:0,left:0,display:"block"}).addClass(d),this.options.container?c.appendTo(this.options.container):c.insertAfter(this.$element);var g=this.getPosition(),h=c[0].offsetWidth,i=c[0].offsetHeight;if(f){var j=this.$element.parent(),k=d,l=document.documentElement.scrollTop||document.body.scrollTop,m=this.options.container=="body"?window.innerWidth:j.outerWidth(),n=this.options.container=="body"?window.innerHeight:j.outerHeight(),o=this.options.container=="body"?0:j.offset().left;d=d=="bottom"&&g.top+g.height+i-l>n?"top":d=="top"&&g.top-l-i<0?"bottom":d=="right"&&g.right+h>m?"left":d=="left"&&g.left-h<o?"right":d,c.removeClass(k).addClass(d)}var p=this.getCalculatedOffset(d,g,h,i);this.applyPlacement(p,d),this.$element.trigger("shown.bs."+this.type)}},b.prototype.applyPlacement=function(a,b){var c,d=this.tip(),e=d[0].offsetWidth,f=d[0].offsetHeight,g=parseInt(d.css("margin-top"),10),h=parseInt(d.css("margin-left"),10);isNaN(g)&&(g=0),isNaN(h)&&(h=0),a.top=a.top+g,a.left=a.left+h,d.offset(a).addClass("in");var i=d[0].offsetWidth,j=d[0].offsetHeight;b=="top"&&j!=f&&(c=!0,a.top=a.top+f-j);if(/bottom|top/.test(b)){var k=0;a.left<0&&(k=a.left*-2,a.left=0,d.offset(a),i=d[0].offsetWidth,j=d[0].offsetHeight),this.replaceArrow(k-e+i,i,"left")}else this.replaceArrow(j-f,j,"top");c&&d.offset(a)},b.prototype.replaceArrow=function(a,b,c){this.arrow().css(c,a?50*(1-a/b)+"%":"")},b.prototype.setContent=function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b),a.removeClass("fade in top bottom left right")},b.prototype.hide=function(){function e(){b.hoverState!="in"&&c.detach()}var b=this,c=this.tip(),d=a.Event("hide.bs."+this.type);this.$element.trigger(d);if(d.isDefaultPrevented())return;return c.removeClass("in"),a.support.transition&&this.$tip.hasClass("fade")?c.one(a.support.transition.end,e).emulateTransitionEnd(150):e(),this.$element.trigger("hidden.bs."+this.type),this},b.prototype.fixTitle=function(){var a=this.$element;(a.attr("title")||typeof a.attr("data-original-title")!="string")&&a.attr("data-original-title",a.attr("title")||"").attr("title","")},b.prototype.hasContent=function(){return this.getTitle()},b.prototype.getPosition=function(){var b=this.$element[0];return a.extend({},typeof b.getBoundingClientRect=="function"?b.getBoundingClientRect():{width:b.offsetWidth,height:b.offsetHeight},this.$element.offset())},b.prototype.getCalculatedOffset=function(a,b,c,d){return a=="bottom"?{top:b.top+b.height,left:b.left+b.width/2-c/2}:a=="top"?{top:b.top-d,left:b.left+b.width/2-c/2}:a=="left"?{top:b.top+b.height/2-d/2,left:b.left-c}:{top:b.top+b.height/2-d/2,left:b.left+b.width}},b.prototype.getTitle=function(){var a,b=this.$element,c=this.options;return a=b.attr("data-original-title")||(typeof c.title=="function"?c.title.call(b[0]):c.title),a},b.prototype.tip=function(){return this.$tip=this.$tip||a(this.options.template)},b.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},b.prototype.validate=function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},b.prototype.enable=function(){this.enabled=!0},b.prototype.disable=function(){this.enabled=!1},b.prototype.toggleEnabled=function(){this.enabled=!this.enabled},b.prototype.toggle=function(b){var c=b?a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs."+this.type):this;c.tip().hasClass("in")?c.leave(c):c.enter(c)},b.prototype.destroy=function(){this.hide().$element.off("."+this.type).removeData("bs."+this.type)};var c=a.fn.tooltip;a.fn.tooltip=function(c){return this.each(function(){var d=a(this),e=d.data("bs.tooltip"),f=typeof c=="object"&&c;e||d.data("bs.tooltip",e=new b(this,f)),typeof c=="string"&&e[c]()})},a.fn.tooltip.Constructor=b,a.fn.tooltip.noConflict=function(){return a.fn.tooltip=c,this}}(window.jQuery)

jQuery.fn.getJsAttr = function(attrName){
	var elemClass = this.attr('class');
	if(!elemClass) return '';
	
	var matchData = 
	elemClass.match(new RegExp('js-'+attrName+'-\'([^\']*)\'')) ||
	elemClass.match(new RegExp('js-'+attrName+'-([^\\s]*)'));
	
	return matchData ? matchData[1] : '';
};

$(function(){
	Bc._isPageLoaded = true;
	Bc.onLoad();
});

if (!jQuery.browser) {
	var matched, browser;

// Use of jQuery.browser is frowned upon.
// More details: http://api.jquery.com/jQuery.browser
// jQuery.uaMatch maintained for back-compat
	jQuery.uaMatch = function( ua ) {
		ua = ua.toLowerCase();

		var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
			/(webkit)[ \/]([\w.]+)/.exec( ua ) ||
			/(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
			/(msie) ([\w.]+)/.exec( ua ) ||
			ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
			[];

		return {
			browser: match[ 1 ] || "",
			version: match[ 2 ] || "0"
		};
	};

	matched = jQuery.uaMatch( navigator.userAgent );
	browser = {};

	if ( matched.browser ) {
		browser[ matched.browser ] = true;
		browser.version = matched.version;
	}

// Chrome is Webkit, but Webkit is also Safari.
	if ( browser.chrome ) {
		browser.webkit = true;
	} else if ( browser.webkit ) {
		browser.safari = true;
	}

	jQuery.browser = browser;
}

window.addEventListener('error', function (e) {
	Bc.logError(e);
});